{"version":3,"sources":["components/Score/StartButton.tsx","components/Score/Score.tsx","components/Score/ScoreScreen.tsx","GameHelper.tsx","hooks/useStage.tsx","components/Stage/Cell.tsx","components/Stage/Stage.tsx","components/Snake/Snake.tsx","hooks/useSnake.tsx","hooks/useInterval.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StartButton","startGame","className","onClick","Score","scoreText","ScoreScreen","createStage","Array","fill","map","a","useStage","head","body","useState","stage","setStage","candy","setCandy","score","setScore","updateStage","prevStage","noCandy","posX","Math","floor","random","posY","getRandomCandy","newStage","row","cell","x","y","pos","push","prev","forEach","useEffect","Cell","Stage","board","index","key","Snake","direction","setDirection","round","STAGE_WIDTH","STAGE_HEIGHT","snakeHead","setSnakeHead","snakeBody","setSnakeBody","updateSnakePos","newSnakeBody","JSON","parse","stringify","unshift","pop","useSnake","gameOver","setGameOver","timeOut","setTimeOut","inputMove","setInputMove","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveX","moveY","length","checkCollission","tabIndex","onKeyDown","keyCode","changeDirection","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f950a6e9.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\n\r\ninterface StartButtonProps {\r\n    startGame: () => void;\r\n}\r\n\r\nexport const StartButton: FC<StartButtonProps> = ({startGame}) => {\r\n    return (\r\n        <button className=\"StartButton\" onClick={startGame}>Start Game</button>\r\n    )\r\n}","import React, { FC } from \"react\";\r\n\r\ninterface ScoreProps {\r\n    scoreText: string;\r\n}\r\n\r\nexport const Score: FC<ScoreProps> = ({scoreText}) => {\r\n    return (\r\n        <div className=\"ScoreContainer\">\r\n            <p className=\"Score\">{scoreText}</p>\r\n        </div>\r\n    )\r\n}","import React, { FC } from 'react';\r\nimport { StartButton } from './StartButton';\r\nimport { Score } from './Score';\r\nimport './Score.css';\r\n\r\ninterface ScoreScreenProps {\r\n    scoreText: string;\r\n    startGame: () => void;\r\n}\r\n\r\nexport const ScoreScreen: FC<ScoreScreenProps> = ({scoreText, startGame}) => {\r\n    return (\r\n        <div className='ScoreScreenContainer'>\r\n        <StartButton startGame={startGame}/>\r\n        <Score scoreText={scoreText}/>\r\n        </div>\r\n    )\r\n}","import { SnakeHead } from \"./hooks/useSnake\";\r\n\r\nexport const STAGE_WIDTH: number = 30;\r\nexport const STAGE_HEIGHT: number = 20;\r\n\r\nexport const createStage = () => {\r\n    return Array(STAGE_WIDTH).fill(0).map((a) => Array(STAGE_HEIGHT).fill(0))\r\n}\r\n\r\nexport const checkCollission = (snakeHead: SnakeHead, stage: (string|number)[][], { x: moveX, y: moveY }: { x: number, y: number }) => {\r\n    if (snakeHead.x + moveX > stage.length-1 || snakeHead.y + moveY > stage[0].length-1 ||\r\n        snakeHead.x + moveX < 0 || snakeHead.y + moveY < 0)\r\n        return true;\r\n\r\n}\r\n\r\nexport const getRandomCandy = (stage: any[][]) => {\r\n    let noCandy: boolean = true;\r\n    while (noCandy) {\r\n        let posX = Math.floor(Math.random() * STAGE_WIDTH);\r\n        let posY = Math.floor(Math.random() * STAGE_HEIGHT);\r\n        if (stage[posX][posY] === 0) {\r\n            noCandy = false;\r\n            stage[posX][posY] = 'C';\r\n        }\r\n    }\r\n    return stage;\r\n}","import { SnakeHead, SnakeBody } from './useSnake';\r\nimport { useState, useEffect } from 'react';\r\nimport { createStage, getRandomCandy } from '../GameHelper';\r\n\r\nexport const useStage = (head: SnakeHead, body: SnakeBody) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    const [candy, setCandy] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n\r\n    const updateStage = (prevStage: any[][]) => {\r\n        if (!candy) {\r\n            setCandy(true);\r\n            setStage(getRandomCandy(stage));\r\n        }\r\n        const newStage = prevStage.map<any[]>((row: any[]) => (\r\n            row.map<any>((cell: any) => cell==='C' ? cell : 0)\r\n        ))\r\n        if (newStage[head.x][head.y] === 'C') {\r\n            body.pos.push({x: head.x, y: head.y});\r\n            setScore((prev) => prev + 1);\r\n            setCandy(false)\r\n        }\r\n        newStage[head.x][head.y] = 'S';\r\n        body.pos.forEach((body) => {\r\n            newStage[body.x][body.y] = 'B'\r\n        });\r\n        return newStage;\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStage((prev) => updateStage(prev));\r\n    }, [head, body])\r\n\r\n    return {stage, setStage, setCandy, score, setScore};\r\n}","import React, { FC, useEffect } from 'react';\r\nimport './Stage.css';\r\n\r\ninterface CellProps {\r\n    cell: (number | string);\r\n}\r\n\r\nexport const Cell: FC<CellProps> = ({cell}) => {\r\n    useEffect(() => {\r\n    }, [cell])\r\n    return (\r\n        <div className={`Cell Cell-${cell === \"S\" ? \"Snake\" : cell === \"B\" ? \"Body\" : cell===\"C\" ? \"Candy\" : \"Empty\"}`}></div>\r\n    )\r\n}","import React, { FC } from \"react\";\r\nimport { Cell } from \"./Cell\";\r\nimport './Stage.css';\r\n\r\ninterface StageProps { \r\n    board: any[][]\r\n}\r\n\r\nexport const Stage: FC<StageProps> = ({board}) => {\r\n    return (\r\n        <div className=\"BoardContainer\">\r\n            {board.map((row, index) => (\r\n                <div key={index} className=\"RowContainer\">\r\n                {row.map((cell, x) =>( <Cell key={x} cell={cell}/>)\r\n                )}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","import React, { FC, KeyboardEvent, useState, useEffect } from \"react\";\r\nimport { ScoreScreen } from \"../Score/ScoreScreen\";\r\nimport './Snake.css';\r\nimport { useSnake } from \"../../hooks/useSnake\";\r\nimport { useInterval } from \"../../hooks/useInterval\";\r\nimport { useStage } from \"../../hooks/useStage\";\r\nimport { Stage } from \"../Stage/Stage\";\r\nimport { checkCollission, createStage, STAGE_WIDTH, STAGE_HEIGHT } from \"../../GameHelper\";\r\n\r\ninterface SnakeProps {\r\n\r\n}\r\n\r\nexport const Snake: FC<SnakeProps> = () => {\r\n    const [direction, setDirection] = useState({ x: 0, y: 0 });\r\n    const { snakeHead, updateSnakePos, snakeBody, setSnakeBody, setSnakeHead } = useSnake();\r\n    const { stage, setStage, setCandy, score, setScore } = useStage(snakeHead, snakeBody);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [timeOut, setTimeOut] = useState<any>(null);\r\n    const [inputMove, setInputMove] = useState(true);\r\n\r\n    const moveSnake = () => {\r\n        if (!checkCollission(snakeHead, stage, direction)) {\r\n            updateSnakePos({ ...direction })\r\n            setInputMove(true);\r\n        } else {\r\n            setTimeOut(null);\r\n            setGameOver(true);\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        setScore(0);\r\n        setTimeOut(null);\r\n        setDirection({x:0, y:0});\r\n        setStage(createStage());\r\n        setSnakeHead({\r\n            x: Math.round(STAGE_WIDTH / 2),\r\n            y: Math.round(STAGE_HEIGHT / 2)\r\n        });\r\n        setSnakeBody({\r\n            pos: [{ x: snakeHead.x, y: snakeHead.y },\r\n            { x: snakeHead.x, y: snakeHead.y }]\r\n        })\r\n        \r\n    }\r\n\r\n    useInterval(() => moveSnake(), timeOut);\r\n\r\n    const changeDirection = (a: KeyboardEvent<HTMLDivElement>) => {\r\n        if (timeOut === null && !gameOver) {\r\n            setTimeOut(200);\r\n        }\r\n        switch (a.keyCode) {\r\n            case (37): \r\n                if (direction.x === 0 && inputMove) (setDirection({ x: -1, y: 0 }))\r\n                break;\r\n            case (38): \r\n                if (direction.y === 0 && inputMove) (setDirection({ x: 0, y: -1 }))\r\n                break;\r\n            case (39): \r\n                if (direction.x === 0 && inputMove) (setDirection({ x: 1, y: 0 }))\r\n                break;\r\n            case (40): \r\n                if (direction.y === 0 && inputMove) (setDirection({ x: 0, y: 1 }))\r\n                break;\r\n        }\r\n        setInputMove(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"SnakeContainer\" tabIndex={0} onKeyDown={(a) => changeDirection(a)}>\r\n            <ScoreScreen startGame={startGame} scoreText={`${gameOver ? \"GameOver\": `Score: ${score}`}`}/>\r\n            <Stage board={stage} />\r\n        </div>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { STAGE_WIDTH, STAGE_HEIGHT } from \"../GameHelper\";\r\n\r\nexport interface SnakeHead {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface SnakeBody {\r\n    pos: { x: number, y: number }[]\r\n    \r\n}\r\n\r\nexport const useSnake = () => {\r\n\r\n    const [snakeHead, setSnakeHead] = useState({\r\n        x: Math.round(STAGE_WIDTH / 2),\r\n        y: Math.round(STAGE_HEIGHT / 2)\r\n    });\r\n    \r\n    const [snakeBody, setSnakeBody] = useState({\r\n        pos: [{ x: snakeHead.x, y: snakeHead.y },\r\n        { x: snakeHead.x, y: snakeHead.y }]\r\n    });\r\n\r\n    const updateSnakePos = ({ x, y }: SnakeHead) => {\r\n        let newSnakeBody: SnakeBody = JSON.parse(JSON.stringify(snakeBody))\r\n        newSnakeBody.pos.unshift({x: snakeHead.x, y: snakeHead.y});\r\n        newSnakeBody.pos.pop();\r\n        setSnakeBody(newSnakeBody);\r\n\r\n        setSnakeHead((prev: SnakeHead) => ({\r\n            ...prev,\r\n            x: prev.x + x, y: prev.y + y\r\n        }))\r\n    }\r\n\r\n    return { snakeHead, updateSnakePos, snakeBody, setSnakeHead, setSnakeBody };\r\n}","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (callback: any, delay: any) =>  {\r\n  const savedCallback = useRef<any>();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}","import React from 'react';\nimport './App.css';\nimport { Snake } from './components/Snake/Snake';\n\nconst App = () => {\n  return (\n    <div>\n      <Snake/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}